openapi: 3.0.0
info:
  title: CovApp
  version: '1.0'
  description: API for standarized Questionaires Development and Analysis
  license:
    name: MIT
servers:
  - url: 'http://localhost:3000'
    description: Development
paths:
  /questions:
    get:
      summary: Get All Questions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
      operationId: get-questions
      description: Returns all questions
      tags:
        - paths
  '/questions/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Single Question
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Question'
                  - $ref: '#/components/schemas/QuestionRadio'
      operationId: get-questions-id
      description: Returns the question with the given ID
      tags:
        - paths
  /results:
    get:
      summary: Results
      operationId: get-answers
      tags:
        - paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Result'
    post:
      summary: ''
      operationId: post-answers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  '':
                    type: string
    parameters: []
  '/results/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Result
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
      operationId: get-answers-id
      description: Get a Questionaire Result
      tags:
        - paths
  '/results/{id}/test-result':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    post:
      summary: Add Test Result to Answer
      operationId: post-results-id-test-result
      responses:
        '200':
          description: OK
      description: Add the test Result to a questionaire
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: ''
              properties:
                id:
                  type: string
                validationAuthority:
                  type: string
      tags:
        - paths
components:
  schemas:
    GenericResponse:
      title: GenericResponse
      type: object
      description: Generic Response
      x-tags:
        - models
      properties:
        language:
          $ref: '#/components/schemas/ENUM_Language'
        data:
          type: object
        errorMessage:
          type: string
        errorCode:
          type: number
      required:
        - language
    Question:
      title: Question
      type: object
      x-tags:
        - models
      properties:
        id:
          $ref: '#/components/schemas/GUID'
        category:
          type: string
        comment:
          type: string
        text:
          $ref: '#/components/schemas/TranslationKey'
        inputType:
          $ref: '#/components/schemas/InputType'
        xmlTag:
          type: string
        type:
          $ref: '#/components/schemas/QuestionType'
        choices:
          type: array
          items:
            type: string
      required:
        - id
    QuestionType:
      type: string
      title: QuestionType
      enum:
        - checkbox
        - radio
        - text
      example: text
      x-examples:
        example-1: text
    InputType:
      type: string
      title: InputType
      enum:
        - date
        - text
      example: date
      x-tags:
        - models
    TranslationKey:
      title: TranslationKey
      type: string
      description: A Translation Key that can be used to request the corresponding translation
      x-examples:
        example-1: application_title
    AnswerQuestion:
      title: AnswerQuestion
      type: object
      properties:
        questionId:
          type: string
        data:
          type: string
        dataType:
          type: string
      description: The Answer to one Question
      x-tags:
        - models
    Result:
      title: QuestionnaireResult
      description: The complete Answer to one Questionaire
      type: object
      properties:
        answers:
          $ref: '#/components/schemas/AnswerQuestion'
        id:
          type: string
        otherIdentifiers:
          type: object
          description: Other Identifiers which can be easily memorized by humans
          properties:
            threeWords:
              type: array
              example:
                - blue
                - dog
                - house
              items:
                type: string
            code:
              type: string
              example: '"A5HJ-2LUP"'
        testResult:
          type: string
    GUID:
      title: GUID
      type: string
      description: Unique Identifier of the resource
    Q_Choice:
      title: Q_Choice
      type: object
      properties:
        value:
          type: string
          description: The Weight for Scoring Algorithm
        text:
          $ref: '#/components/schemas/TranslationKey'
    ENUM_Language:
      type: string
      title: ENUM_Language
      enum:
        - none
        - de
        - en
        - pl
      x-tags:
        - models
